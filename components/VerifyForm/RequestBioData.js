import { Typography, Box, Button } from '@mui/material';
import Image from 'next/image';
import styles from "./VerifyForm.module.scss";
import { useState } from "react";
import NotificationManager from '../../lib/NotificationManager.js';
import { defaultConfig } from '../../config/default';
import FingerprintIcon from '@mui/icons-material/Fingerprint';
import { CircularProgress } from "@mui/material"

export default function RequestBioData({ cb, MDS_BYPASS = false }) {
	const [failed, setFailed] = useState(false);
	const [isLoading, setIsLoading] = useState(false);

	let port = 4501;
	let isCaptureReqSent = false;
	const start = true;
	
	const handleTryAgain = async () => {
		setIsLoading(true);
		capture_flow();
	}
	const capture_flow = async () => {
		const disc = await discovery();
		console.log(disc);
		if (disc && disc.deviceStatus === "Ready") {
			const info = await deviceInfo()
			if (info[0].error.errorCode === "0") {
				await stream_and_capture();
			}
			setTimeout(async () => {
				console.log("log timeout ");
			}, 15000)
			3
		}

	}
	const stream_and_capture = async () => {
		const response = await fetch(`http://127.0.0.1:${port}/stream`, {
			method: "STREAM",
			headers: {
				"accept": "multipart/*",
			},
			body: JSON.stringify({
				"deviceId": "C8R1ET11432",
				"deviceSubId": 1,
				"timeout": "10000"
			})
		});
		const reader = response.body.getReader();
		while (true) {
			const { value, done } = await reader.read();
			if (done === true) break;
			if (isCaptureReqSent == false) {
				isCaptureReqSent = true;
				console.log("Sending capture request");
				const response = await capture();
				cb(response);
				setIsLoading(false);
			}
		}
	}

	const deviceInfo = async () => {
		try {
			const response = await fetch(`http://127.0.0.1:${port}/info`, {
				method: 'MOSIPDINFO',
				headers: {
					"Content-Type": "application/json",
					"accept": "application/json",
				},
				body: {},
				redirect: 'manual'
			});
			const json = await response.json();
			console.log({ deviceInfo: json });
			return json;
		} catch (err) {
			return err;
		}
	}
	const capture = async () => {
		try {
			const response = await fetch(`http://127.0.0.1:${port}/capture`, {
				method: "RCAPTURE",
				body: JSON.stringify({
					"env": "Developer",
					"purpose": "Registration",
					"specVersion": "0.9.5",
					"timeout": "20000",
					"deviceCode": 'C8R1ET11432',
					"captureTime": new Date().toISOString(),
					"transactionId": "1125555",
					"bio": [
						{
							"type": "Finger",
							"count": "4",
							// bioSubType is optional values must according to deviceSubId and count 
							"bioSubType": [
								"Left IndexFinger",
								"Left MiddleFinger",
								"Left RingFinger",
								"Left LittleFinger"
							],
							"exception": [],
							"requestedScore": "50",
							"deviceId": "C8R1ET11432",
							"deviceSubId": 1, // 1 for Left Slap, 2 for Right slap, 3 for thumbs 
							"previousHash": ""
						}
					]
				})
			})

			const json = response.json();

			return json;
		} catch (err) {
			return err;
		}
	}

	const discovery = async () => {
		try {
			for (; port < 4600; port++) {
				const response = await fetch(`http://127.0.0.1:${port}/device`, {
					method: "MOSIPDISC",
					headers: {
						"Content-Type": "application/json",
						"accept": "application/json",
					},
					body: JSON.stringify({
						"type": "Finger"
					})
				});
				const json = await response.json();
				if (json.length > 0)
					return json[0];
			}
			return false;

		} catch (err) {
			return err;
		}
	}
	const callMDS = async () => {
		const options = {
			"env": "Staging",
			"purpose": "Auth",
			"specVersion": "0.9.5",
			"timeout": "3000",
			"captureTime": new Date().toISOString(),
			"domainUri": "https://mosipcmuafrica.me",
			"transactionId": "12345671522",
			"bio": [
				{
					"type": "Finger",
					"count": "1",
					"bioSubType": ["UNKNOWN"],
					"requestedScore": "10",
					"deviceId": "2",
					"deviceSubId": "1",
					"previousHash": ""
				}
			],
			"customOpts": [
				{
					"name": "name1",
					"value": "value1"
				}
			]
		}
		console.log(MDS_BYPASS);
		if (MDS_BYPASS) {
			const biometrics = {
				"specVersion": "0.9.5",
				"data": "eyJ4NWMiOlsiTUlJRFBUQ0NBaVdnQXdJQkFnSUVZQ0ZISVRBTkJna3Foa2lHOXcwQkFRc0ZBREJTTVFzd0NRWURWUVFHRXdKSlRqRVNNQkFHQTFVRUNBd0pTMkZ5Ym1GMFlXdGhNUTR3REFZRFZRUUtEQVZOYjNOcGNERU9NQXdHQTFVRUN3d0ZUVzl6YVhBeER6QU5CZ05WQkFNTUJsSnZiM1JEUVRBZUZ3MHlNVEF5TURneE5ERXpOVE5hRncwek1UQXlNRGd4TkRFek5UTmFNRzh4Q3pBSkJnTlZCQVlUQWtsT01SSXdFQVlEVlFRSURBbHJZWEp1WVhSaGEyRXhHREFXQmdOVkJBb01EMjF2YzJsd1ptbHVaMlZ5YzJ4aGNERVlNQllHQTFVRUN3d1BiVzl6YVhCbWFXNW5aWEp6YkdGd01SZ3dGZ1lEVlFRRERBOXRiM05wY0dacGJtZGxjbk5zWVhBd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURmT2JpWjRIQ0FWWGVMWlNhOGVTcU1qc2djTWxjeDNuQ0ZFNDdYd1UyK2NkM3hLY284TDl3a2MxYWhGalZteHJpb1VuU2M2MGp3emdTUVhvdWRUc09GaTRUM0tXUjRaWmd2ZnJHdGk2YldzUTlNSjFXZEZKVCtwaHdOSzQydWNGUHVsbGljNDZlYnhZNDF4RmlKL1hHdXhCT1F2R0s3WUt6VlhWa29ZODFjUUNJbDBsTWpjRVNYelBPeWF0MDFWaW80UWRycTkyTnJseHpzRGZuOGdqblVFK0VmTkQ5NlhhV0xrQlZ2TmlXMUtvcC9SeHhmV09TY2hRR3BBQXZmOERVNlRSN3JvK0pBblpVbU5UN3lKcnRzekE5c0dwSTdoQ3dVTDM3aEk0YVFlYitXU2tMa2FRa1EvSVpzSzIveHFRbGZLTEJoRlJHMlM0QnUvclUzZWNqTkFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUQ2NzNMZHdSTlA0QlE5OWNURlFmN05SUXVsNGowaTFCdEw4S2lNbjJXQ0ZWbzVRcWlvdFMvTE1YZm43UEtHekxXWlUrR0MrVjNLODMydnVmeFZRQW1oc3hwNU11TzQ3eGZuNVJ1NTBqbVZteThrUVYxdmhSNSsyWjVzK0pSTitTNWwyMmRuQk1Fc1RnWmlFQnBnNFQ5Y0p4RE10L2MrbWxLR3B0a2ZzbkFRNmNyd1pxQURIYno4aVZZNVhNTFYvN1FqR3YzZ3lVVFJMM2dyRHZMSlErWTNPclNtZ1F1UWwxRldMUDk2VURSNnhkSEdnMy9MQmJQK2h5bHEzY2VieWpmcllCQ2RQQzJuZHVqdzFQWTF6UGk2L0o1NytGbGIzdCtOOXQyM2UyNGp0RXdyN1dPbHp2MUNXYzdDQUlGVVRjVXhiS2JxU3BGREpXS0FoZkhXMm5pUT0iXSwiYWxnIjoiUlMyNTYiLCJ0eXAiOiJKV1QifQ..1EPbcNPfsvqWoOsY-uspGcJR5Ty4oS9LbNkO6eYF5JsDudmuckn8vzQUKdue6RIXgAAE764nQ7N7F-BVPwe07i42d1qshbL-cBh1341UZ9DDO3SYHPJlXOscsIA9wUzlG5Nvl78B0QfqA8-wvIDJPm47DbsoDzUk1lKCUL_e3jERikmG4H7njBi74Dc7EP_olamcRN690FVXol9vm9rbplepH50ZIE_hgffEqLaEVsBKVhGNZB3OWqjt9qzNg41LdnYsXS-NI8NUG9MXybX046aJBCR_EGJgCePTpXZK3Az0407osF2A_VUgW-NAQMBhvnAvCVmpw0uhgXhh6DnaYg",
				"hash": "B90CF2C966F79FBDE81E0FF739A58B04CC9517A31EDCE8C4B82C5B3078576350",
				"error": {
					"errorCode": "0",
					"errorInfo": "Success"
				}
			}
			return cb({ options, biometrics });
		} else {

			await fetch(defaultConfig.MDS_URL,
				{
					method: "RCAPTURE",
					body: JSON.stringify(options),
					headers: {
						'Content-Type': 'application/json'
					}
				})
				.then(res => res.json())
				.then(res => {
					cb({ options, ...res });
					return true;
				})
				.catch(err => {
					console.log(err);
					setFailed(true);
					setIsLoading(false);
					const message = "Failed to capture biometric.";
					NotificationManager.notify({ message, type: "error" })
					return false;
				});
		}

	}

	return (
		<Box >
			<Box className={styles.form} >
				{!isLoading &&
					<Box sx={{ display: "flex", flexDirection: "column", alignItems: "center" }} >
						<Typography variant="h6" gutterBottom>Place finger on biometric device and click {failed ? "Try Again" : "Start"}</Typography>
						<FingerprintIcon sx={{ width: 100, height: 100 }} />
					</Box>
				}
				{isLoading &&
					<Box sx={{ display: "flex", flexDirection: "column", alignItems: "center" }}>
						<Image src="/img/thumb.gif" className={styles.Image} width={300} height={200} alt="fingerprint" />
						<CircularProgress sx={{ mt: 3 }} />
					</Box>
				}
			</Box>
			<Box sx={{ display: "flex", flexDirection: "column", alignItems: "center", mt: 3 }}>
				{!isLoading &&
					<Button onClick={handleTryAgain} disabled={isLoading}>{failed ? "Try Again" : "Start"}</Button>
				}
			</Box>
		</Box>
	)
}
